version: '3.8'

services:
  # PostgreSQL 数据库
  postgres:
    image: postgres:15
    container_name: rayneo_postgres
    environment:
      POSTGRES_DB: rayneo_ai_agent
      POSTGRES_USER: rayneo_user
      POSTGRES_PASSWORD: rayneo_pass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - rayneo_network

  # Redis 缓存
  redis:
    image: redis:7-alpine
    container_name: rayneo_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - rayneo_network

  # Milvus 向量数据库
  milvus:
    image: milvusdb/milvus:v2.3.0
    container_name: rayneo_milvus
    command: ["milvus", "run", "standalone"]
    environment:
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: minio:9000
    ports:
      - "19530:19530"
    depends_on:
      - etcd
      - minio
    volumes:
      - milvus_data:/var/lib/milvus
    networks:
      - rayneo_network

  # Milvus 依赖: etcd
  etcd:
    image: quay.io/coreos/etcd:v3.5.0
    container_name: rayneo_etcd
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    volumes:
      - etcd_data:/etcd
    networks:
      - rayneo_network

  # Milvus 依赖: MinIO
  minio:
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    container_name: rayneo_minio
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    command: minio server /minio_data --console-address ":9001"
    volumes:
      - minio_data:/minio_data
    networks:
      - rayneo_network

  # Ollama 本地模型服务
  ollama:
    image: ollama/ollama:latest
    container_name: rayneo_ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
    networks:
      - rayneo_network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # 后端 API 服务
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: rayneo_backend
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://rayneo_user:rayneo_pass@postgres:5432/rayneo_ai_agent
      - REDIS_URL=redis://redis:6379
      - MILVUS_HOST=milvus
      - MILVUS_PORT=19530
      - OLLAMA_BASE_URL=http://ollama:11434
    depends_on:
      - postgres
      - redis
      - milvus
      - ollama
    volumes:
      - ./backend:/app
      - model_cache:/app/models
      - upload_data:/app/uploads
    networks:
      - rayneo_network
    restart: unless-stopped

  # 前端 Web 应用
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: rayneo_frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_BASE_URL=http://localhost:8000
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - rayneo_network
    restart: unless-stopped

  # Nginx 反向代理
  nginx:
    image: nginx:alpine
    container_name: rayneo_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - rayneo_network
    restart: unless-stopped

  # Prometheus 监控
  prometheus:
    image: prom/prometheus:latest
    container_name: rayneo_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - rayneo_network

  # Grafana 可视化
  grafana:
    image: grafana/grafana:latest
    container_name: rayneo_grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - rayneo_network

volumes:
  postgres_data:
  redis_data:
  milvus_data:
  etcd_data:
  minio_data:
  ollama_data:
  model_cache:
  upload_data:
  prometheus_data:
  grafana_data:

networks:
  rayneo_network:
    driver: bridge
